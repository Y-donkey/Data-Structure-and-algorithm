完全图   若有 n 个顶点的无向图有 n(n-1)/2 条边, 则此图为完全无向图。
		 有 n 个顶点的有向图有n(n-1) 条边, 则此图为完全有向图

在无向图中, 若从顶点v1到顶点v2有路径, 则称顶点v1与v2是连通的。如果图中任意一对顶点都是连通的, 则称此图是连通图。非连通图的极大连通子图叫做连通分量。

在有向图中, 若对于每一对顶点vi和vj, 都存在一条从vi到vj和从vj到vi的路径, 则称此图是强连通图。非强连通图的极大强连通子图叫做强连通分量。

生成树 ：  一个连通图的生成树是其极小连通子图，在n个顶点的情形下，有n-1条边

在有向图中, 统计第 i 行 1 的个数可得顶点 i 的出度，统计第 j 列 1 的个数可得顶点 j 的入度

拓扑排序可以判断一个有向图中是否有环。无环的图所有点都能进行拓扑排序。
拓扑排序代码示例：
	for(I = 1; I <= n; ++i)           //遍历n次每次找出一个顶点 
	{
	    for(j = 1; j <= n; ++j)       //遍历所有的结点 
	    {
	        if(indegree[j] == 0)
	        {
	            indegree[j]--;      //该顶点的入度为-1
	            printf("%d ", j);
	            for(k = 1; k <= n; ++k)
	            {
	                 if(graph[j][k])  indegree[k]--;  //与该顶点关联的顶点的入度递减 
	            }
	            break;
	        }
	    }
	}


AOE网中有些活动可以并行进行，所以完成整个工程的最短时间是从源点到汇点的最长路径长度，路径长度为路径上各边的权值之和。把从源点到汇点的最长路径长度称为关键路径

关键活动是指那些最早发生时间和最迟发生时间相同的节点

最小生成树的求法：
	prim 算法：每次加入一条边权值最小，这条边的一个顶点已被覆盖，另一个尚未被覆盖        (复杂度O(n^2))
	适用于稠密图

	kruskal算法：每次贪心加入最小权值的边，前提是边的两个顶点不在同一并查集上     (复杂度O(m*lg(m))   //m是边的条数
	适用于稀疏图

最短路径问题：

	1：Dijkstra算法 （该算法要求不存在负权边） 
	2：BF算法：要求图中不能包含权值总和为负值回路
	3：floyd:动态规划思想
				F[i,j]表示i到j的临时最短路
				枚举中转点k
				if (f[i][k] + f[k][j] <= f[i][j])
           				f[i][j] = f[i][k] + f[k][j];



